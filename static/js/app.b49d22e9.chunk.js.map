{"version":3,"sources":["src/Rk4.tsx","src/components/Input.tsx","App.tsx"],"names":["L1","x0","y0","t0","func","Parser","evaluate","x","y","t","L2","RK4","h","n","func1","func2","k1f1","k1f2","k2f1","k2f2","k3f1","k3f2","k4f1","k4f2","i","data","type","mode","name","marker","color","layout","width","height","title","InputNumber","errorMessage","isInvalid","rest","invalid","FormControl","Input","bg","placeholderTextColor","fontSize","borderWidth","borderColor","_invalid","size","ErrorMessage","App","dataInicial","useForm","control","handleSubmit","getValues","errors","formState","useState","showGraph","setGraph","NativeBaseProvider","Center","VStack","mt","HStack","space","Text","rules","required","render","onChange","field","alignSelf","placeholder","onChangeText","message","pattern","value","Button","onPress","p","borderRadius","variant","parseFloat","Container","ml"],"mappings":"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","file":"static/js/app.b49d22e9.chunk.js","sourcesContent":["import { Parser } from \"expr-eval\";\nimport Plot from \"react-plotly.js\";\n\ninterface calcInput {\n    x0: number,\n    y0: number,\n    t0: number,\n    h: number,\n    n: number,\n    func1: string,\n    func2: string,\n\n}\n \nfunction L1(x0:number, y0:number, t0:number, func:string){\n\n    return Parser.evaluate(func, {x: x0, y: y0, t: t0})\n}\n\nfunction L2(x0:number, y0:number, t0:number, func:string){\n\n    return Parser.evaluate(func, {x: x0, y: y0, t: t0})\n}\n\nexport default function RK4({x0, y0, t0, h, n, func1, func2}:calcInput){\n\n    var x = [];\n    var y = [];\n    var t = [];\n\n    x[0] = x0;\n    y[0] = y0;\n    t[0] = t0;\n\n    var k1f1 = 0;\n    var k1f2 = 0;\n\n    var k2f1 = 0;\n    var k2f2 = 0;\n\n    var k3f1 = 0;\n    var k3f2 = 0;\n\n    var k4f1 = 0;\n    var k4f2 = 0;\n    \n\n    for (var i = 0; i < n; i++){\n        \n        t[i + 1] = t[i] + h;\n\n        k1f1 = L1(x[i], y[i], t[i], func1);\n        k1f2 = L2(x[i], y[i], t[i], func2);\n\n        k2f1 = h * L1(x[i] + k1f1 / 2, y[i] + k1f2 /2, t[i] + h/2, func1);\n        k2f2 = h * L2(x[i] + k1f1 / 2, y[i] + k1f2 /2, t[i] + h/2, func2);\n\n        k3f1 = h * L1(x[i] + k1f1 / 2, y[i] + k1f2 /2, t[i] + h/2, func1);\n        k3f2 = h * L2(x[i] + k1f1 / 2, y[i] + k1f2 /2, t[i] + h/2, func2);\n\n        k4f1 = h * L1(x[i] + (h*k3f1), y[i] + (h*k3f2), t[i] + h, func1);\n        k4f2 = h * L2(x[i] + (h*k3f1), y[i] + (h*k3f2), t[i] + h, func2);\n\n        x[i + 1] = x[i] + (1/6) * (k1f1 + 2 * k2f1 + 2 * k3f1 + k4f1)\n        y[i + 1] = y[i] + (1/6) * (k1f2 + 2 * k2f2 + 2 * k3f2 + k4f2)\n    }\n\n    return (\n        <Plot\n            data={[\n                {\n                    x: t,\n                    y: x,\n                    type: 'scatter',\n                    mode: 'lines',\n                    name: 'linha x',\n                    marker: { color: 'red' },\n                },\n                {\n                    x: t,\n                    y: y,\n                    type: 'scatter',\n                    mode: 'lines',\n                    name: 'linha y',\n                    marker: { color: 'blue' },\n                },\n            ]}\n\n            layout={{ width: 1000, height: 500, title: 'Grafico do sistema de EDO' }} />\n      \n    );\n}","import { FormControl, IInputProps, Input } from \"native-base\";\nimport { color } from \"native-base/lib/typescript/theme/styled-system\";\n\ntype Props = IInputProps & {\n    errorMessage?: string | null;\n}\n\nexport default function InputNumber( { errorMessage,isInvalid ,...rest}: Props){\n\n    const invalid = !!errorMessage || isInvalid;\n\n    return (\n      <FormControl isInvalid={invalid}>\n        <Input \n          isInvalid={invalid}\n          bg=\"trasnparent\"\n          placeholderTextColor={\"coolGray.500\"}\n          color=\"#121313\"\n          fontSize=\"20\"\n          borderWidth = {3}\n          borderColor= \"#121313\"\n          _invalid={{\n            borderColor: 'red.500',\n            color: 'red.500',\n            size: '20',\n          }}\n          {...rest}\n        />\n        <FormControl.ErrorMessage>\n          {errorMessage}\n        </FormControl.ErrorMessage>\n      </FormControl>\n    );\n}","import React, { useState } from 'react';\nimport RK4 from './src/Rk4';\nimport { Box, Button, Center, Container, HStack, NativeBaseProvider, Text, VStack } from 'native-base';\nimport { useForm, Controller } from 'react-hook-form';\nimport InputNumber from './src/components/Input';\n\ninterface  FormData {\n  x0: string,\n  y0: string,\n  t0: string,\n  h: string,\n  n: string,\n  func1: string,\n  func2: string,\n}\n\n\n\nexport default function App() {\n\n\n\n  let dataInicial: FormData = {\n    x0: '1',\n    y0: '1',\n    t0: '0',\n    h: '1',\n    n: '500',\n    func1: '0.2 * x * (1-(x+y)/ 1000)',\n    func2: '0.5 * y * (1-(x+y)/ 500)',\n  };\n\n\n  const { control, handleSubmit, getValues , formState: {errors}} = useForm<FormData>();\n \n  const [showGraph, setGraph] = useState(false);\n  \n\n\n  function onSubmit(data: FormData){\n    setGraph(true)\n  }\n\n  \n  return (\n    <NativeBaseProvider>\n      <Center bg={'white'}>\n        <VStack mt={20}>\n          <Center>\n            <HStack space={40}>\n              <Center>\n                <Text fontSize={22}>\n                  Primeira Derivada de X:\n                </Text>\n                <Controller\n                  control={control}\n                  name=\"func1\"\n                  rules={{\n                    required: \"Função é obrigatório\",\n                  }}\n                  render={({field: { onChange }  }) => (\n                    <InputNumber \n                      alignSelf={'center'}\n                      placeholder={dataInicial.func1}\n                      onChangeText={onChange}\n                      height={12}\n                      width={300}\n                      errorMessage={errors.func1?.message}\n                    />\n                  )}\n                />\n              </Center>\n              <Center>\n                <Text fontSize={22}>\n                  Primeira Derivada de y:\n                </Text>\n                <Controller\n                  control={control}\n                  name=\"func2\"\n                  rules={{\n                    required: \"Função é obrigatório\",\n                  }}\n                  render={({field: { onChange }  }) => (\n                    <InputNumber \n                      alignSelf={'center'}\n                      placeholder={dataInicial.func2}\n                      onChangeText={onChange}\n                      height={12}\n                      width={300}\n                      errorMessage={errors.func2?.message}\n                    />\n                  )}\n                />\n              </Center>\n            </HStack>\n          </Center>\n          <HStack mt={10} space={20}>\n            <Center>\n              <Text fontSize={16}>\n                Valor Inicial de X:\n              </Text>\n              <Controller\n                control={control}\n                name=\"x0\"\n                rules={{\n                  required: \"X inicial é obrigatório\",\n                  pattern: {\n                      value: /^[+-]?\\d+(\\.\\d+)?$/i,\n                      message: 'Somente números são permitidos',\n                  },\n              }}\n\n                render={({field: { onChange }  }) => (\n                  <InputNumber \n                    alignSelf={'center'}\n                    placeholder={dataInicial.x0}\n                    onChangeText={onChange}\n                    height={12}\n                    width={140}\n                    errorMessage={errors.x0?.message}\n                  />\n                )}\n              />\n            </Center>\n            \n            <Center>\n              <Text fontSize={16}>\n                Valor Inicial de Y:\n              </Text>\n              <Controller\n                control={control}\n                name=\"y0\"\n                rules={{\n                  required: \"Y inicial é obrigatório\",\n                  pattern: {\n                      value: /^[+-]?\\d+(\\.\\d+)?$/i,\n                      message: 'Somente números são permitidos',\n                  },\n              }}\n                render={({field: { onChange }  }) => (\n                  <InputNumber \n                    alignSelf={'center'}\n                    placeholder={dataInicial.y0}\n                    onChangeText={onChange}\n                    height={12}\n                    width={140}\n                    errorMessage={errors.y0?.message}\n                  />\n                )}\n              />\n            </Center>\n            <Center>\n              <Text fontSize={16}>\n                Valor Inicial do tempo:\n              </Text>\n              <Controller\n                control={control}\n                name=\"t0\"\n                rules={{\n                  required: \"Tempo inicial é obrigatório\",\n                  pattern: {\n                      value: /^[+-]?\\d+(\\.\\d+)?$/i,\n                      message: 'Somente números são permitidos',\n                  },\n              }}\n                render={({field: { onChange }  }) => (\n                  <InputNumber\n                    alignSelf={'center'} \n                    placeholder={dataInicial.t0}\n                    onChangeText={onChange}\n                    height={12}\n                    width={140}\n                    errorMessage={errors.t0?.message}\n                  />\n                )}\n              />\n            </Center>\n            <Center>\n              <Text fontSize={16}>\n                Tamanho do passo H:\n              </Text>\n              <Controller\n                control={control}\n                name=\"h\"\n                rules={{\n                  required: \"Tamanho do passo é obrigatório\",\n                  pattern: {\n                      value: /^[+-]?\\d+(\\.\\d+)?$/i,\n                      message: 'Somente números são permitidos',\n                  },\n              }}\n                render={({field: { onChange }  }) => (\n                  <InputNumber \n                    alignSelf={'center'}\n                    placeholder={dataInicial.h}\n                    onChangeText={onChange}\n                    height={12}\n                    width={140}\n                    errorMessage={errors.h?.message}\n                  />\n                )}\n              />\n            </Center>\n            <VStack> \n              <Text fontSize={16}>\n                Quantidade total de interações:\n              </Text>\n              <Controller\n                control={control}\n                name=\"n\"\n                rules={{\n                  required: \"Quantidade total de interações é obrigatório\",\n                  pattern: {\n                      value: /^[+-]?\\d+(\\.\\d+)?$/i,\n                      message: 'Somente números são permitidos',\n                  },\n              }}\n                render={({field: { onChange }  }) => (\n                  <InputNumber\n                    alignSelf={'center'}\n                    placeholder={dataInicial.n}\n                    onChangeText={onChange}\n                    height={12}\n                    width={140}\n                    errorMessage={errors.n?.message}\n                  />\n                )}\n              />\n            </VStack>\n          </HStack>\n        </VStack>\n\n        <Button mt={20} onPress={handleSubmit(onSubmit)} alignSelf={'center'} p={0} height={50} width={250} borderWidth={2} borderRadius={3} borderColor={'#121313'} variant='ghost'>\n          <Text fontSize={32} color={'#121313'}>Calcular</Text>\n        </Button>\n        {/* \n        <Center>\n          {showInitialGraph? <RK4 x0={parseFloat(dataInicial.x0)} y0={parseFloat(dataInicial.y0)} t0={parseFloat(dataInicial.t0)} h={parseFloat(dataInicial.h)} n={parseFloat(dataInicial.n)} func1={dataInicial.func1} func2={dataInicial.func2} /> : null  }\n        </Center> \n        */}\n        <Center>\n          {showGraph? <RK4 x0={parseFloat(getValues().x0)} y0={parseFloat(getValues().y0)} t0={parseFloat(getValues().t0)} h={parseFloat(getValues().h)} n={parseFloat(getValues().n)} func1={getValues().func1} func2={getValues().func2} /> : <RK4 x0={parseFloat(dataInicial.x0)} y0={parseFloat(dataInicial.y0)} t0={parseFloat(dataInicial.t0)} h={parseFloat(dataInicial.h)} n={parseFloat(dataInicial.n)} func1={dataInicial.func1} func2={dataInicial.func2} />  }\n        </Center>\n      </Center>\n      <Container ml={20} mt={20}>\n        <Text fontSize={24}>\n          Para a entrada da função tem os seguintes operadores:{\"\\n\"}\n          Adição (+){\"\\n\"}\n          Subtração (-){\"\\n\"}\n          Multiplicação (*){\"\\n\"}\n          Divisão (/){\"\\n\"}\n          Exponenciação ( ^ ){\"\\n\"}\n          Tem também as seguintes funções: {\"\\n\"}\n          sin(x) - Seno de x (x em radianos){\"\\n\"}\n          cos(x) - Cosseno de x (x em radianos){\"\\n\"}\n          tan(x) - Tangente de x (x em radianos){\"\\n\"}\n          asin(x) - Arco seno de x (x em radianos){\"\\n\"}\n          acos(x) - Arco cosseno de x (x em radianos){\"\\n\"}\n          atan(x) - Arco  tangente de x (x em radianos){\"\\n\"}\n          sqrt(x) - Raiz quadrada de x{\"\\n\"}\n          log(x) - Logaritmo natural de x{\"\\n\"}\n          abs(x) - Valor absoluto de x{\"\\n\"}\n          exp(x) -  Exponencial de base e elevado a x{\"\\n\"}\n        </Text>\n      </Container>\n    </NativeBaseProvider>\n  );\n}"],"sourceRoot":""}